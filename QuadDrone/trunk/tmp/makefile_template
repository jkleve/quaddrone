# Available targets:
# make all /Do everything (main.elf and main.hex)
# make load /Program the device
# make dload /Program the device and start debugging
# make debug /Start debugging
# make clean /Clean
# make size /Get information about memory usage
# make filename.s /Generate assembler file from a C source
# make filename.o /Generate object file from a C source
#Source files
SRC_FILES=\
main.c
#Object files
OBJ_FILES=$(SRC_FILES:.c=.o)
#Directories where to look for include files
INC_DIRS=\
-I. \
#Output file name
OUTPUT=blink
#Programmer and port
PROG=jtag2fast

PORT=usb
#Debugging host and port
DHOST=localhost
DPORT=6423
#Compiler related params
MCU=atmega2560
CC=avr-gcc
OBJCOPY=avr-objcopy
CFLAGS= -mcall-prologues -std=gnu99 -funsigned-char -funsigned-bitfields \
-fpack-struct -fshort-enums -mmcu=$(MCU) -Wall -Wstrict-prototypes \
$(INC_DIRS)
#Optimization level
CFLAGS+=-Os
#Debug info
CFLAGS+=-gdwarf-2

#Generate hex file ready to upload
all: $(OUTPUT).elf
	$(OBJCOPY) -R .eeprom -O ihex $(OUTPUT).elf $(OUTPUT).hex \
	@echo "--------------------------------"									\
	@echo " BUILD FINISHED "																	\
	@echo "--------------------------------"									\
#Link output files
$(OUTPUT).elf: $(OBJ_FILES)
	$(CC) $(CFLAGS) $(OBJ_FILES) -o $(OUTPUT).elf -Wl,-Map,$(OUTPUT).map
#Create object files
$(OBJ_FILES): %.o : %.c
	$(CC) -c $(CFLAGS) $< -o $@
#Create assembler file of a C source
%.s: %.c
	$(CC) -S $(CFLAGS) $< -o $@
#Loads the program to the avr device
load:
	avrdude -p $(MCU) -c $(PROG) -P $(PORT) -e -U
#flash:w:$(OUTPUT).hex
#Starts debugging
debug:
	avarice -2 -j $(PORT) $(DHOST):$(DPORT)
#Loads the program to the avr device and starts debugging
dload: $(OUTPUT).elf
	avarice -2 -j $(PORT) -e -p -f $(OUTPUT).elf $(DHOST):$(DPORT)
#Get information about memory usage
size: $(OUTPUT).elf
	avr-size -C --mcu=$(MCU) $(OUTPUT).elf
#Cleans all generated files
clean:
	rm -f $(OBJ_FILES)
	12
	m -f $(OUTPUT).elf
	rm -f $(OUTPUT).hex
	rm -f $(OUTPUT).map
