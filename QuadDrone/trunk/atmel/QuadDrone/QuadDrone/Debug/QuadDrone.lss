
QuadDrone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000068  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000026d  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000185  00000000  00000000  00000597  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001fe  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000128  00000000  00000000  0000091c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000019c  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001be  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	b7 c0       	rjmp	.+366    	; 0x1d4 <__vector_25>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	62 c0       	rjmp	.+196    	; 0x182 <__vector_47>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	3f d0       	rcall	.+126    	; 0x174 <main>
  f6:	a1 c0       	rjmp	.+322    	; 0x23a <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <usart_comm_init>:
{	
	/* Asynchronous USART (UMSEL01 & UMSEL00 = 0)				  *
	 * Parity Mode disabled (UPM01 & UPM00 = 0)					  *
	 * stop bits: 1-bit (USBS0 = 0)								  *
	 * Character size: 8-bit (UCSZ02 = 0, UCSZ01 = 1, UCSZ00 = 1) */
	UCSR0A |= (1 << U2X0);							// double speed
  fa:	e0 ec       	ldi	r30, 0xC0	; 192
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	80 83       	st	Z, r24
	UBRR0 = F_CPU / (8 * USART_BAUD) - 1;			// calc ubrr0
 104:	81 e2       	ldi	r24, 0x21	; 33
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	90 93 c5 00 	sts	0x00C5, r25
 10c:	80 93 c4 00 	sts	0x00C4, r24
	//UBRR0 = 51; // see table 22-12
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);		// Format 8N1 Asynchronous	
 110:	e2 ec       	ldi	r30, 0xC2	; 194
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	86 60       	ori	r24, 0x06	; 6
 118:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0) |  (1 << TXEN0);			// init transmission	
 11a:	e1 ec       	ldi	r30, 0xC1	; 193
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	88 61       	ori	r24, 0x18	; 24
 122:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXCIE0);						// init RX Complete Interrupt Enable
 124:	80 81       	ld	r24, Z
 126:	80 68       	ori	r24, 0x80	; 128
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <init_pulse>:

// must have global interrupts enabled
void init_pulse(void)
{
	/* --- TIMER --- */
	TCCR5B = (1 << WGM52);					  /* Set CTC bit */
 12c:	e1 e2       	ldi	r30, 0x21	; 33
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	80 83       	st	Z, r24
	OCR5A = 31250;							  /* trigger interrupt when tcnt = ocr 31250 = 2 sec  15625 = 1 sec */
 134:	82 e1       	ldi	r24, 0x12	; 18
 136:	9a e7       	ldi	r25, 0x7A	; 122
 138:	90 93 29 01 	sts	0x0129, r25
 13c:	80 93 28 01 	sts	0x0128, r24
	TIMSK5 |= (1 << OCIE5A);				  /* enable Output Compare A Match Interrupt */
 140:	a3 e7       	ldi	r26, 0x73	; 115
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	8c 91       	ld	r24, X
 146:	82 60       	ori	r24, 0x02	; 2
 148:	8c 93       	st	X, r24
	TCCR5B |= (1 << CS02) | (1 << CS00);	  /* Prescale mode: 5 (clk/1024) CS52 = 1 CS51 = 0 CS50 = 1 */
 14a:	80 81       	ld	r24, Z
 14c:	85 60       	ori	r24, 0x05	; 5
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <put_char>:
	
}

// TX data char through USART
int put_char (int dato){
	while ((UCSR0A & (1 << UDRE0)) == 0);	// Wait for empty buffer
 152:	e0 ec       	ldi	r30, 0xC0	; 192
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	20 81       	ld	r18, Z
 158:	25 ff       	sbrs	r18, 5
 15a:	fd cf       	rjmp	.-6      	; 0x156 <put_char+0x4>
	UDR0 = dato;
 15c:	80 93 c6 00 	sts	0x00C6, r24
	return dato;
}
 160:	08 95       	ret

00000162 <get_char>:

// Rx data char through USART
int get_char(void){
	int dato;
	while ((UCSR0A & (1<<RXC0)) == 0 );		// Wait for data in buffer
 162:	e0 ec       	ldi	r30, 0xC0	; 192
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	88 23       	and	r24, r24
 16a:	ec f7       	brge	.-6      	; 0x166 <get_char+0x4>
	dato = UDR0;
 16c:	80 91 c6 00 	lds	r24, 0x00C6
	return dato;
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret

00000174 <main>:
#define STEP_C 67
//int volatile pre_step_c = 1;

int main(void)
{
	usart_comm_init();	// timer5: initialize usart0 for communication w/ gs
 174:	c2 df       	rcall	.-124    	; 0xfa <usart_comm_init>
	put_char(0x30);
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	eb df       	rcall	.-42     	; 0x152 <put_char>
	sei();				// enable global interrupts
 17c:	78 94       	sei
	//DDRA = (1<<PA3) | (1<<PA4) | (1<<PA5); /* initialize ABC lights */
	//PORTA = 0b11011111;
	//while (pre_step_c);
	//PORTA = 0b11111111;
	init_pulse();		// start pulsing @ 1/2 Hz
 17e:	d6 df       	rcall	.-84     	; 0x12c <init_pulse>
 180:	ff cf       	rjmp	.-2      	; 0x180 <main+0xc>

00000182 <__vector_47>:
* Interrupt Handling
********************************/

/* pulse */
ISR(TIMER5_COMPA_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	0b b6       	in	r0, 0x3b	; 59
 18e:	0f 92       	push	r0
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	put_char(0x30);
 1a8:	80 e3       	ldi	r24, 0x30	; 48
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	d2 df       	rcall	.-92     	; 0x152 <put_char>
}
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	0b be       	out	0x3b, r0	; 59
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <__vector_25>:

/* received rx transmission */
ISR(USART0_RX_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	0b b6       	in	r0, 0x3b	; 59
 1e0:	0f 92       	push	r0
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	//PORTA = 0b11101111;
	int rec = get_char();
 1fa:	b3 df       	rcall	.-154    	; 0x162 <get_char>
	switch (rec)
 1fc:	81 34       	cpi	r24, 0x41	; 65
 1fe:	91 05       	cpc	r25, r1
 200:	21 f0       	breq	.+8      	; 0x20a <__vector_25+0x36>
 202:	83 34       	cpi	r24, 0x43	; 67
 204:	91 05       	cpc	r25, r1
 206:	31 f0       	breq	.+12     	; 0x214 <__vector_25+0x40>
 208:	04 c0       	rjmp	.+8      	; 0x212 <__vector_25+0x3e>
	{
		case ARM_C:
			put_char(ARM);
 20a:	81 e6       	ldi	r24, 0x61	; 97
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	a1 df       	rcall	.-190    	; 0x152 <put_char>
			break;
 210:	01 c0       	rjmp	.+2      	; 0x214 <__vector_25+0x40>
			} else {
				// make comm macro for DENY
			}*/
			break;
		default:
			put_char(rec);
 212:	9f df       	rcall	.-194    	; 0x152 <put_char>
			break;
	}
}
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0b be       	out	0x3b, r0	; 59
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
